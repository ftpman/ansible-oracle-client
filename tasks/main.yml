---

  - fail: msg="Please define local client_pkg_dir variable"
    when: client_pkg_dir == ""

  - name: Ensure packages are installed
    apt:
      name: "{{ item }}"
      state: installed
    become: true
    with_items:
      - zip
      - unzip
      - gzip
      - libaio1

  - set_fact:
      dist: "{{ dist_folders[ansible_distribution] }}"
      arch: "{{ arch_folders[ansible_architecture] }}"

  - set_fact:
      driver: "{{ driver_types[dist] }}"

  - fail: msg="Couldn't do the dist var"
    when: not dist is defined or dist == ""

  - fail: msg="Couldn't do the arch var"
    when: not arch is defined or arch == ""

  - set_fact:
      client_path: "{{ client_pkg_dir }}/{{ dist }}/{{ arch }}"

  - local_action: stat path={{ client_path }}
    register: p

  - fail: msg="Path exists and is a directory"
    when: not p.stat.isdir is defined or p.stat.isdir|bool == false

  - name: Create folders
    file: path={{ item }} state=directory owner=root group=root mode=0755
    become: true
    with_items:
      - "{{ base_path }}"

  - name: Unarchive client files
    unarchive:
      src: "{{ client_path }}/{{ item }}"
      dest: "{{ base_path }}"
    become: true
    with_items:
      - instantclient-basic-{{ dist }}.{{ arch }}-{{oracle_client_version}}.zip
      - instantclient-sdk-{{ dist }}.{{ arch }}-{{oracle_client_version}}.zip
      - instantclient-sqlplus-{{ dist }}.{{ arch }}-{{oracle_client_version}}.zip
    tags:
      - archive
      - zip

  - name: Link base folders
    file:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      state: link
    become: true
    with_items:
      - { src: "./{{ unzip_path }}", dest: "{{ instantclient_path }}" }
      - { src: "./instantclient/sdk/include", dest: "{{ oracle_include_path }}" }
    tags:
      - link

  - name: Link libraries to give versionless file
    file:
      src: "./{{ item }}.{{ driver }}.{{ oracle_library_version }}"
      dest: "{{ instantclient_path }}/{{ item }}.{{ driver }}"
      state: link
    become: true
    with_items:
      - "libclntsh"
      - "libocci"
    tags:
      - link

  - name: Define libraries in /etc/environment
    become: true
    blockinfile:
      dest: /etc/environment
      block: |
        OCI_HOME={{ instantclient_path }}
        OCI_LIB_DIR={{ instantclient_path }}
        OCI_INC_DIR={{ oracle_include_path }}
        OCI_INCLUDE_DIR={{ oracle_include_path }}
        LD_LIBRARY_PATH={{ instantclient_path }}
      insertafter: EOF
      marker: "# {mark} ANSIBLE MANAGED BLOCK - ORACLE"
    tags:
      - variables

  - name: Save system files
    template: src="{{ item.src }}" dest="{{ item.dest }}" owner=root group=root mode=0644
    become: true
    with_items:
      - { src: ../templates/oracle.conf.j2, dest: /etc/ld.so.conf.d/oracle.conf }
      - { src: ../templates/oracle.sh.j2, dest: /etc/profile.d/oracle.sh }
    tags:
      - variables

  - shell: ldconfig
    become: true
    when:
      - false

#    nano /tmp/ocicheck.sh
#    chmod a+x /tmp/ocicheck.sh
#    sudo /tmp/ocicheck.sh
